For this hack-a-thing, I chose to work with chrome extensions. I was intrigued by the demo of the smarter search history project in class, and it made me wonder what other basic browser functions could be improved upon. To get started, I followed google's starter tutorial at https://developer.chrome.com/extensions/getstarted, which taught you how to make a basic extension that allows you to change the background color of the current page. Using the system of collecting user input and then injecting javascript set up in this tutorial, I set out to create an extension that improved the basic finding functionality (Command-F) found on all websites. My extension replicates the basic finding function by using jquery to traverse all text nodes in the DOM, checking each to see if it contains the word being searched and adding CSS to highlight it if so. However, this extension adds functionality by using an API call to search synonyms for the word, then highlighting these in a different color as well.

I ran into several roadblocks on this assignment, as replicating the basic find functionality itself turned out to be much harder than anticipated. Originally, I tried simply taking the HTML of the webpage and replacing all instances of the word being searched everywhere it appeared. This didn't work out very well, as typing in terms like "body" or "html" caused the formatting of the page to break. I realized I needed to replace only the visible text, and this required some help from stack overflow to figure out how to traverse these nodes. Basically, I treated it similar to any tree and used recursion to iterate through all nodes, checking if it was a text node and replacing the search term when needed. Another issue was that I was trying to inject far more javascript than the original project, so I had to separate it into a new file. However, I then ran into the issue of how to pass parameters to that file. Turns out you can use callbacks to set the variables and then run the external file immediately after which is what I did here.

There were some issues I wasn't able to solve in 10 hours of coding. One of the biggest was unhighlighting the search term. Of course I could have added a class and simply removed it from all nodes, but there is  no guarantee the class is unique so that method wouldn't work. Another outstanding issue is that some searches still break formatting on the site. It seems like this occurs when text nodes are adjacent to each other and words get split between them, which is a rare but plausible scenario. Finally, it would have been much better to find a way to highlight text without using CSS, as altering the page's HTML is not a very good solution to marking these words.